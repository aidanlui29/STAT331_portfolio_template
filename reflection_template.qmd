---
title: "STAT 331 Portfolio"
author: "Aidan Lui"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1
# Lab 3

data <- read.csv(here("week2", "lab3", "teacher_evals.csv"))

```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2
# Lab 2
surveys <- read_csv(here("week1", "lab2", "surveys.csv"))

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx
# PA 4

military <- read_xlsx("gov_spending_per_capita.xlsx",
                      sheet = "Share of Govt. spending",
                      skip  = 7,
                      n_max = 190,
                      na = c("..", "xxx", ". .")
                      )
```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1
# Lab 4 Question 3

tax_rev_join <- tax_rev |>
  select(entity_name, year, total_property_taxes, sales_and_use_taxes)

ca_childcare <- ca_childcare |>
  left_join(
    tax_rev_join,
    by = c("county_name" = "entity_name", "study_year" = "year")
  )

ca_childcare
```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2
# Lab 3 Question 5 Revised

teacher_evals_clean <- data |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(
    across(c(teacher_id, course_id), as.character),
    across(c(sex, academic_degree), as.factor)
  ) |>
    select(-c(
    stud_grade_avg, stud_grade_std, stud_grade_var_coef,
    percent_failed, stud_grade_avg_cur, stud_grade_std_cur,
    stud_grade_var_coef_cur, class_duration, weekday, time_of_day,
    SET_score_1sem, maximum_score, gender))
```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3
# Challenge 4

ca_table <- ca_summary |>
  summarize(
    across(
      starts_with(c("mc_", "mfcc_")), 
      median,
      na.rm = TRUE
))

ca_table <- tibble(
  Age_Group = c("Infant", "Toddler", "Preschool"),
  Center_Based_Median = scales::dollar(c(ca_table$mc_infant, ca_table$mc_toddler, ca_table$mc_preschool)),
  Family_In_Home_Median = scales::dollar(c(ca_table$mfcc_infant, ca_table$mfcc_toddler,                                                                  ca_table$mfcc_preschool)),
  Difference = scales::dollar(c(
                              ca_table$mc_infant - ca_table$mfcc_infant,
                              ca_table$mc_toddler - ca_table$mfcc_toddler,
                              ca_table$mc_preschool - ca_table$mfcc_preschool)
  )
)

ca_table
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1
# Lab 3 Question 10

teacher_evals_clean |>
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarize(
    avg_q1 = mean(SET_score_avg, na.rm = TRUE),
    n_courses = n_distinct(course_id),
    .groups = "drop") |>
  filter(n_courses >= 5) |>
  filter(avg_q1 == max(avg_q1, na.rm = TRUE) |
         avg_q1 == min(avg_q1, na.rm = TRUE)) |>
  arrange(desc(avg_q1))

```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1
# Lab 4 Question 5

median_income_by_region <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(
    value = median(mhi_2018, na.rm = TRUE),
    .groups = "drop"
  ) |>
  pivot_wider(
    names_from = study_year,
    values_from = value
  ) |>
  arrange(desc(`2018`))

median_income_by_region
```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character
# Lab 5 

w1 <- person |>
  filter(str_detect(address_street_name,"Northwestern Dr")) |>
  filter(address_number == max(address_number))

w2 <- person |>
  filter(str_detect(address_street_name,"Franklin Ave"),
        str_detect(name,("^Annabel"))
  )

w1$name
w2$name
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
# Lab 5

w1 <- person |>
  filter(str_detect(address_street_name,"Northwestern Dr")) |>
  filter(address_number == max(address_number))

w2 <- person |>
  filter(str_detect(address_street_name,"Franklin Ave"),
        str_detect(name,("^Annabel"))
  )

w1$name
w2$name

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date
# Lab 5

gfn <- get_fit_now_member |>
  filter(str_detect(id, "^48Z"),
         str_detect(membership_status,"gold"))

gfn_checkins <- get_fit_now_check_in |>
  filter(membership_id %in% gfn$id) |>
  mutate(date = ymd(as.character(check_in_date)))|>
  filter(date == ymd("20180109"))

gfn_people <- gfn_checkins |>
  inner_join(gfn, by = c("membership_id" = "id")) |>
  inner_join(person, by = c("person_id" = "id")) 

gfn_suspect <- gfn_people |>
  inner_join(drivers_license, by = c("license_id" = "id")) |>
  filter(str_detect(plate_number, "H42W"))

gfn_suspect$name.x
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1
# Challenge 3 Question 1

teacher_evals_compare <- data |>
  filter(question_no == 903) |>
  mutate(
    set_level = if_else(SET_score_avg >= 4, "excellent", "standard"),
    sen_level = case_when(
      seniority <= 4 ~ "junior",
      seniority >= 5 & seniority <= 8 ~ "senior",
      seniority > 8 ~ "very senior"
    )
  ) |>
  select(course_id, set_level, sen_level)
```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2

```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1
#Lab 4 Question 7

ca_childcare |>
  select(region, county_name, study_year, mc_infant, mc_toddler, mc_preschool) |>
  rename(
    Infant = mc_infant,
    Toddler = mc_toddler,
    Preschool = mc_preschool
  ) |>
  pivot_longer(
    c(Infant, Toddler, Preschool),
    names_to = "age_group",
    values_to = "median_weekly_price"
  ) |>
  mutate(
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
    region_label = str_remove(region, "Region"),
    region_label = fct_reorder2(region_label, study_year, median_weekly_price)
  )

```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2
#Challenge 4

plot_data <- ca_summary |>
  select(mc_infant, mc_toddler, mc_preschool,
         mfcc_infant, mfcc_toddler, mfcc_preschool) |>
  pivot_longer(
    cols = everything(),
    names_to = "age_group",
    values_to = "weekly_price"
  ) |>
  mutate(
    age_group = recode(
      age_group,
      mc_infant = "Center_Infant",
      mc_toddler = "Center_Toddler",
      mc_preschool = "Center_Preschool",
      mfcc_infant = "Family_Infant",
      mfcc_toddler = "Family_Toddler",
      mfcc_preschool = "Family_Preschool"
    ),
    setting = if_else(str_detect(age_group, "Center"), "Center-Based", "Family (In-Home)"),
    age_group = case_when(
      str_detect(age_group, "Infant") ~ "Infant",
      str_detect(age_group, "Toddler") ~ "Toddler",
      str_detect(age_group, "Preschool") ~ "Preschool"
    ),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")
  )
```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string
#Lab 5, probably gonna change

gfn <- get_fit_now_member |>
  filter(str_detect(id, "^48Z"),
         str_detect(membership_status,"gold"))

gfn_checkins <- get_fit_now_check_in |>
  filter(membership_id %in% gfn$id) |>
  mutate(date = ymd(as.character(check_in_date)))|>
  filter(date == ymd("20180109"))

gfn_people <- gfn_checkins |>
  inner_join(gfn, by = c("membership_id" = "id")) |>
  inner_join(person, by = c("person_id" = "id")) 

gfn_suspect <- gfn_people |>
  inner_join(drivers_license, by = c("license_id" = "id")) |>
  filter(str_detect(plate_number, "H42W"))

gfn_suspect$name.x

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date
# Lab 5 

mastermind <- person |>
  inner_join(drivers_license, by = c("license_id" = "id")) |>
  filter(str_detect(hair_color,"red"),
        height >= 65 & height <= 67,
        str_detect(car_make,"Tesla"),
        str_detect(car_model,"Model S")
  ) |>

  inner_join(facebook_event_checkin |>
            filter(event_name == "SQL Symphony Concert") |>
            mutate(date = ymd(date)) |>
            filter(month(date) == 12, year(date) == 2017) |>
            count(person_id) |>
            filter(n == 3),
            by = c("id" = "person_id")
  )

mastermind$name
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1
# Lab 4 Question 3

tax_rev_join <- tax_rev |>
  select(entity_name, year, total_property_taxes, sales_and_use_taxes)

ca_childcare <- ca_childcare |>
  left_join(
    tax_rev_join,
    by = c("county_name" = "entity_name", "study_year" = "year")
  )

ca_childcare

```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right
#none yet

```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1
# Lab 5

gfn <- get_fit_now_member |>
  filter(str_detect(id, "^48Z"),
         str_detect(membership_status,"gold"))

gfn_checkins <- get_fit_now_check_in |>
  filter(membership_id %in% gfn$id) |>
  mutate(date = ymd(as.character(check_in_date)))|>
  filter(date == ymd("20180109"))

gfn_people <- gfn_checkins |>
  inner_join(gfn, by = c("membership_id" = "id")) |>
  inner_join(person, by = c("person_id" = "id")) 

gfn_suspect <- gfn_people |>
  inner_join(drivers_license, by = c("license_id" = "id")) |>
  filter(str_detect(plate_number, "H42W"))

gfn_suspect$name.x

```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2
# Lab 4 Question 2 

ca_childcare <- childcare_costs |>
  inner_join(counties, by = "county_fips_code") |>
  filter(state_name == "California") |>
  arrange(county_fips_code, study_year)

ca_childcare

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Example 1
-   Example 2
-   Example 3
-   Example 4
-   Example 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1

```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2

```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1

```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   using `across()`

```{r}
#| label: pe-1-across

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

```

-   Example 2

```{r}
#| label: dsm-2-2

```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
